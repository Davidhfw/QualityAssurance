{"name": "test_create_cluster_by_name[name18-WrongType]", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [400]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/Users/rapheal/miniconda3/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/rapheal/miniconda3/lib/python3.12/site-packages/simplejson/__init__.py:514: in loads\n    return _default_decoder.decode(s)\n/Users/rapheal/miniconda3/lib/python3.12/site-packages/simplejson/decoder.py:386: in decode\n    obj, end = self.raw_decode(s)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <simplejson.decoder.JSONDecoder object at 0x102e10c80>\ns = '<!doctype html>\\n<html lang=en>\\n<title>400 Bad Request</title>\\n<h1>Bad Request</h1>\\n<p>Failed to decode JSON object: Expecting value: line 1 column 1 (char 0)</p>\\n'\nidx = 0, _w = <built-in method match of re.Pattern object at 0x1019ebac0>, _PY3 = True\n\n    def raw_decode(self, s, idx=0, _w=WHITESPACE.match, _PY3=PY3):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` or ``unicode``\n        beginning with a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n        Optionally, ``idx`` can be used to specify an offset in ``s`` where\n        the JSON document begins.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        if idx < 0:\n            # Ensure that raw_decode bails on negative indexes, the regex\n            # would otherwise mask this behavior. #98\n            raise JSONDecodeError('Expecting value', s, idx)\n        if _PY3 and not isinstance(s, str):\n            raise TypeError(\"Input string must be text, not bytes\")\n        # strip UTF-8 bom\n        if len(s) > idx:\n            ord0 = ord(s[idx])\n            if ord0 == 0xfeff:\n                idx += 1\n            elif ord0 == 0xef and s[idx:idx + 3] == '\\xef\\xbb\\xbf':\n                idx += 3\n>       return self.scan_once(s, idx=_w(s, idx).end())\nE       simplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Users/rapheal/miniconda3/lib/python3.12/site-packages/simplejson/decoder.py:416: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <apitest.api.test.test_create_cluster.TestCreateCluster object at 0x10390d460>, name = {1}, flag = 'WrongType', api_url = 'http://127.0.0.1:5000/CreateCluster'\n\n    @allure.feature(\"测试创建集群参数校验-名称\")\n    @pytest.mark.parametrize(\"name, flag\", generate_name_data())\n    def test_create_cluster_by_name(self, name, flag, api_url=api_url):\n    \n        # 获取正确的登录认证\n        auth = login(\"root\", \"pwd\")\n    \n        headers = {\"Authorization\": auth,\n                   \"Content-Type\": \"application/json\"}\n    \n        # 组装Payload\n        payload = {}\n        try:\n            payload = json.dumps({\n                \"name\": name,\n                \"desc\": \"\",\n                \"cni_plugin\": \"flannel\",\n                \"version\": \"1.24\",\n                \"delete_protection\": 0,\n            })\n        except Exception as e:\n            print(e)\n    \n        print(\"payload is \", payload)\n        res = requests.post(api_url, headers=headers, data=payload)\n>       print(\"res json is \", res.json())\n\ntest_create_cluster.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [400]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Users/rapheal/miniconda3/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError"}, "attachments": [{"name": "stdout", "source": "dc78c490-cf82-498f-85bd-07811474eaf3-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "name", "value": "{1}"}, {"name": "flag", "value": "'WrongType'"}], "start": 1723353168058, "stop": 1723353168060, "uuid": "c163e698-8831-47f6-bd65-7709b9b9c1a2", "historyId": "b2f6def74ec8be1d2610b1581d9948ec", "testCaseId": "9ab9e539129b3cabe61646712b194804", "fullName": "test_create_cluster.TestCreateCluster#test_create_cluster_by_name", "labels": [{"name": "epic", "value": "CreateCluster API Tests"}, {"name": "feature", "value": "测试创建集群参数校验-名称"}, {"name": "suite", "value": "test_create_cluster"}, {"name": "subSuite", "value": "TestCreateCluster"}, {"name": "host", "value": "raphealdeMacBook-Pro.local"}, {"name": "thread", "value": "29604-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_create_cluster"}]}